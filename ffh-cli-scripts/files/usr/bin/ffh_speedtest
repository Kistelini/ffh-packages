#!/bin/sh

cpu_measure () {
	stat=$(cat /proc/stat | grep cpu\ )

	export cpu_all2=$cpu_all
	export cpu_no_idle2=$cpu_no_idle

	export cpu_all=$(echo "$stat" | awk -F ' ' -e '{ print $2+$3+$4+$5+$6+$7+$8 }')
	export cpu_no_idle=$(echo "$stat" | awk -F ' ' -e '{ print $2+$3+$4+$6+$7+$8 }')
}

cpu_results() {
	echo $(echo "print(math.floor(100*($cpu_no_idle2 - $cpu_no_idle) / ($cpu_all2 - $cpu_all)))" | lua)
}

cpu_count() {
	cat /proc/stat | grep cpu\\d | wc -l
}

get_mbps() {
	bps=$(jsonfilter -e "@.end.streams[0].receiver.bits_per_second")
	echo "print(math.floor($bps/1024/1024))" | lua
}

test() {
	if [ "$jsonoutput" -eq 0 ]; then
		echo -n "$1: "
	fi

	if [ -z "$time" ]; then
		time=10
	fi

	if [ -z "$streams" ]; then
		streams=1
	fi

	cpu_measure
	res=$(iperf3 --connect-timeout 200 -c $2 -J -R -t $time -P $streams)
	exitcode=$(echo $?)
	cpu_measure

	if [ "$jsonisfirst" -eq 1 ]; then
		echo -n " "
		jsonisfirst=0
	else
		echo -n ","
	fi

	if [ $exitcode -ne 0 ]; then
		if [ "$jsonoutput" -eq 0 ]; then
			echo failed to connect
		else
			echo '  "'$1'": { "connection_failed": true }'
		fi
		return
	fi

	if [ "$jsonoutput" -eq 0 ]; then
		echo $(echo "$res" | get_mbps) Mbit/s "   " \(cpus: $(cpu_count), cpu: $(cpu_results)%, streams: ${streams}, duration: ${time}s\)
	else
		echo '  "'$1'": { "connection_failed": false, "mbps": '$(echo "$res" | get_mbps)', "cpu": '$(cpu_results)', "cpu_cnt": '$(cpu_count)', "duration": '${time}' }'
	fi
}

print_nodeinfo() {
	echo NODEINFO
	echo ========
	echo hostname: $(uci get system.@system[0].hostname)
	echo timestamp: $(date -R)
	echo domain: $(uci get gluon.core.domain)
	echo domain_id: $(gluon-show-site | jsonfilter -e '@.hide_domain[0]')
	echo model: $(jsonfilter -i /etc/board.json -e '@.model.name')
	cat /proc/cpuinfo | grep "MHz" | tr -d ' ' | cut -d ':' -f 2 | awk -e '{ printf "cpu %02d: %d MHz\n", NR, $1 }'
	echo
}

print_neighbours() {
	echo "BATMAN NEIGHBOURS"
	echo "================="
	batctl n -H
	echo
}

get_peers() {
	. /usr/share/libubox/jshn.sh
	json_load "$(gluon-show-site | jsonfilter -e '@.ffh.speedtest_peers')"
	json_get_keys sn
	echo $sn
}

get_peer_host() {
	gluon-show-site | jsonfilter -e "@.ffh.speedtest_peers.$1.host"
}

header() {
	if [ "$header_was_print" == "1" ]; then
		return;
	fi

	print_nodeinfo
	print_neighbours

	echo "SPEEDTEST RESULTS"
	echo "================="

	header_was_print=1
}

test_all() {
	for peer_name in $(get_peers); do
		test ${peer_name} $(get_peer_host ${peer_name})
	done
}

test_single() {
	if ! get_peers | grep $1 > /dev/null; then
		echo Peer not found: $1
		exit 1
	fi

	test $1 $(get_peer_host $1)
}

print_help() {
	echo $0 [OPTIONS]
	echo
	echo "-a        Do tests for all peers."
	echo "-H        Do not print the header"
	echo "-ls       List all peers."
	echo "-p PEER   Do a test for PEER. Can be specified multiple times."
	echo "-c IP     Do a test for a custom remote IP."
	echo "-t        Test duration passed to iperf3 (default: 10s)"
	echo "-P        Number of parallel connations passed to iperf3 (default: 1)"
	echo "-h        Print this help"
}

print_peers() {
	for peer_name in $(get_peers); do
		echo ${peer_name}: $(get_peer_host ${peer_name})
	done
}

if ! [ -f /usr/bin/iperf3 ]; then
	echo iperf3 is not installed! install it using:
	echo
	echo opkg update
	echo opkg install iperf3
	echo

	exit 1
fi

has_arg() {
	if echo $ARGS | grep '\'$1 > /dev/null; then
		return 0
	fi
	return 1
}

get_arg() {
	echo $ARGS | sed 's_^.*'$1' \([^ ]*\).*$_\1_'
}

ARGS=$@
jsonoutput=0
jsonisfirst=1

if has_arg -h; then print_help; exit 0; fi
if has_arg -H; then header_was_print=1; fi
if has_arg -t; then time=$(get_arg -t); fi
if has_arg -P; then streams=$(get_arg -P); fi
if has_arg -j; then header_was_print=1; jsonoutput=1; fi

if [ "$jsonoutput" -eq 1 ]; then
	echo "{"
fi

action_done=0
while [ ! -z $1 ]
do
	case "$1" in
		-h|-H) ;;
		-t|-P|-j) shift;;
		-ls) print_peers; exit 0;;
		-c) action_done=1; header; test "[$2]" "$2"; shift;;
		-p) action_done=1; header; test_single $2; shift;;
		-a) action_done=1; header; test_all;;
		*) echo; echo -n "Option $1 is invalid. See help: "; print_help; exit 1;;
	esac
	shift
done

if [ "$jsonoutput" -eq 1 ]; then
        echo "}"
fi

if [ "$action_done" == "0" ]; then
	print_help
fi
